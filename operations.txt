#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cuda_runtime.h>
using namespace std;

__global__ void minimum(int *input){
  int tid=threadIdx.x;
  auto step_size=1;
  int numofthreads = blockDim.x;
  while(numofthreads>0){
    if(tid<numofthreads){
      int first = tid*step_size*2;
      int second = first+step_size;
      if(input[second]<input[first])
        input[first]=input[second];
    }
    step_size*=2;
    numofthreads/=2;
  }
}

__global__ void sum(int *input){
  int tid=threadIdx.x;
  auto step_size=1;
  int numofthreads=blockDim.x;
  while(numofthreads>0){
    if(numofthreads>0){
      int first = tid*step_size*2;
      int second = first+step_size;
      input[first]+=input[second];
    }
    step_size*=2;
    numofthreads/=2;
  }
}

int main(){
  int n;
  cout<<"Enter the number of elements : ";
  cin>>n;
  int *arr = new int[n];
  for(int i=0;i<n;i++){
    arr[i]=rand()%20000;
    cout<<arr[i]<<" ";
  }
  cout<<endl;
  int devicearraysize = n*sizeof(int);
  
  int *devicearray,result;
  cudaMalloc(&devicearray,devicearraysize);
  cudaMemcpy(devicearray,arr,devicearraysize,cudaMemcpyHostToDevice);
  minimum<<<1,n/2>>>(devicearray);
  cudaMemcpy(&result,devicearray,sizeof(int),cudaMemcpyDeviceToHost);
  cout<<"Minimum : "<<result<<endl;
  
  int *devicearraysum,resultsum;
  cudaMalloc(&devicearraysum,devicearraysize);
  cudaMemcpy(devicearraysum,arr,devicearraysize,cudaMemcpyHostToDevice);
  sum<<<1,n/2>>>(devicearraysum);
  cudaMemcpy(&resultsum,devicearraysum,sizeof(int),cudaMemcpyDeviceToHost);
  cout<<"Sum : "<<resultsum<<endl;
  
  cudaFree(devicearray);
  cudaFree(devicearraysum);
  
  return 0;
}